{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(python:*)",
      "Bash(pip install:*)",
      "Bash(conda create:*)",
      "Bash(conda activate:*)",
      "Bash(source:*)",
      "Bash(chmod:*)",
      "Bash(./run_project.sh:*)",
      "Bash(bash:*)",
      "Bash(nvidia-smi:*)",
      "Bash(pip uninstall:*)",
      "Bash(mv:*)",
      "WebFetch(domain:)",
      "Bash(cp:*)",
      "Bash(ls:*)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(sed:*)",
      "Bash(CUDA_VISIBLE_DEVICES=-1 python main.py --config configs/config.yaml)",
      "Bash(conda install:*)",
      "Bash(timeout:*)",
      "Bash(true)",
      "Bash(rm:*)",
      "Bash(pkill:*)",
      "Bash(CUDA_LAUNCH_BLOCKING=1 timeout 180 python performance_profiler.py)",
      "Bash(CUDA_LAUNCH_BLOCKING=1 timeout 300 python main.py --config configs/config.yaml)",
      "Bash(time python:*)",
      "Bash(/home/lanpoknlanpokn/miniconda3/bin/conda run -n event_flare python test_v2ce_integration.py)",
      "Bash(/home/lanpoknlanpokn/miniconda3/bin/conda run -n event_flare pip install pathlib2)",
      "Bash(/home/lanpoknlanpokn/miniconda3/bin/conda run -n event_flare python -c \"\nimport yaml\nimport sys\nfrom pathlib import Path\nfrom src.dvs_flare_integration import create_flare_event_generator\n\n# Load config and enable debug mode  \nwith open(''configs/config.yaml'', ''r'') as f:\n    config = yaml.safe_load(f)\n\nconfig[''data''][''event_simulator''][''type''] = ''v2ce''\nconfig[''debug_mode''] = True\nconfig[''debug_output_dir''] = ''./output/quick_test_v2ce''\nconfig[''data''][''flare_synthesis''][''duration_sec''] = 0.05\nconfig[''data''][''event_simulator''][''v2ce''][''seq_len''] = 4  # Reduce to speed up\n\nprint(''Testing V2CE with minimal parameters...'')\ngenerator = create_flare_event_generator(config)\nevents, timing = generator.generate_flare_events()\n\nprint(f''Results: {len(events)} events in {timing.get(\"\"total_pipeline_sec\"\", 0):.3f}s'')\nif len(events) > 0:\n    print(f''Event range: t=[{events[0,0]}-{events[-1,0]}], x=[{events[:,1].min()}-{events[:,1].max()}], y=[{events[:,2].min()}-{events[:,2].max()}]'')\n    print(f''Polarity: ON={sum(events[:,3] > 0)}, OFF={sum(events[:,3] <= 0)}'')\n\")",
      "Bash(/home/lanpoknlanpokn/miniconda3/bin/conda run -n event_flare pip install einops)",
      "Bash(/home/lanpoknlanpokn/miniconda3/bin/conda run -n event_flare python -c \"\nimport yaml\nimport sys\nfrom pathlib import Path\nfrom src.dvs_flare_integration import create_flare_event_generator\n\n# Test minimal V2CE configuration\nwith open(''configs/config.yaml'', ''r'') as f:\n    config = yaml.safe_load(f)\n\nconfig[''data''][''event_simulator''][''type''] = ''v2ce''\nconfig[''debug_mode''] = True\nconfig[''debug_output_dir''] = ''./output/final_test_v2ce''\nconfig[''data''][''flare_synthesis''][''duration_sec''] = 0.03  # Even shorter\nconfig[''data''][''event_simulator''][''v2ce''][''seq_len''] = 4\n\nprint(''Final V2CE test...'')\ngenerator = create_flare_event_generator(config)\nevents, timing = generator.generate_flare_events()\n\nprint(f''SUCCESS: {len(events)} events generated in {timing.get(\"\"total_pipeline_sec\"\", 0):.3f}s'')\nif len(events) > 0:\n    print(f''Event summary:'')\n    print(f''  Time: {events[0,0]} to {events[-1,0]} μs ({(events[-1,0]-events[0,0])/1000:.1f} ms)'')\n    print(f''  Space: x=[{events[:,1].min()}-{events[:,1].max()}], y=[{events[:,2].min()}-{events[:,2].max()}]'')\n    print(f''  Polarity: {sum(events[:,3] > 0)} ON, {sum(events[:,3] <= 0)} OFF'')\n    print(f''  Rate: {len(events) / ((events[-1,0] - events[0,0]) / 1e6):.1f} events/sec'')\nelse:\n    print(''No events generated - check V2CE model inference'')\n\")",
      "Bash(/home/lanpoknlanpokn/miniconda3/bin/conda run -n event_flare python -c \"\nimport yaml\nfrom src.dvs_flare_integration import create_flare_event_generator\n\n# Test V2CE with minimal config\nwith open(''configs/config.yaml'', ''r'') as f:\n    config = yaml.safe_load(f)\n\nconfig[''data''][''event_simulator''][''type''] = ''v2ce''\nconfig[''debug_mode''] = True\nconfig[''debug_output_dir''] = ''./output/test_v2ce_final''\nconfig[''data''][''flare_synthesis''][''duration_sec''] = 0.02\nconfig[''data''][''event_simulator''][''v2ce''][''seq_len''] = 2  # Very small for quick test\n\nprint(''Testing V2CE after logger fix...'')\ngenerator = create_flare_event_generator(config)\nevents, timing = generator.generate_flare_events()\n\nprint(f''V2CE Result: {len(events)} events in {timing.get(\"\"total_pipeline_sec\"\", 0):.3f}s'')\n\nif len(events) > 0:\n    print(f''✅ V2CE SUCCESS!'')\n    print(f''  Events: {len(events)}'')\n    print(f''  Duration: {(events[-1,0] - events[0,0])/1000:.1f} ms'')\n    print(f''  Resolution: x∈[{events[:,1].min()}, {events[:,1].max()}], y∈[{events[:,2].min()}, {events[:,2].max()}]'')\n    print(f''  Polarity: {sum(events[:,3]>0)} ON, {sum(events[:,3]<=0)} OFF'')\nelse:\n    print(''❌ V2CE still generating 0 events'')\n    \nprint(f''Timing breakdown:'')\nfor k, v in timing.items():\n    if k.endswith(''_sec''):\n        print(f''  {k}: {v:.3f}s'')\n\")",
      "Bash(/home/lanpoknlanpokn/miniconda3/bin/conda run -n event_flare python quick_test_v2ce.py)",
      "Bash(/home/lanpoknlanpokn/miniconda3/bin/conda run -n event_flare python test_v2ce_standalone.py)",
      "Bash(/home/lanpoknlanpokn/miniconda3/bin/conda run -n event_flare python debug_v2ce_events.py)",
      "Bash(/home/lanpoknlanpokn/miniconda3/bin/conda run -n event_flare python test_v2ce_fixed.py)",
      "Bash(/home/lanpoknlanpokn/miniconda3/bin/conda run -n event_flare python analyze_v2ce_detailed.py)",
      "Bash(/home/lanpoknlanpokn/miniconda3/bin/conda run -n event_flare python v2ce.py -h)",
      "Bash(/home/lanpoknlanpokn/miniconda3/bin/conda run -n event_flare python test_v2ce_correct_fps.py)",
      "Bash(/home/lanpoknlanpokn/miniconda3/bin/conda run -n event_flare python /mnt/e/2025/event_flick_flare/main/test_v2ce_correct_fps.py)",
      "Bash(/home/lanpoknlanpokn/miniconda3/bin/conda run -n event_flare python test_v2ce_final_fix.py)",
      "Bash(/home/lanpoknlanpokn/miniconda3/bin/conda run -n event_flare python debug_v2ce_timing.py)",
      "Bash(echo)",
      "Bash(echo:*)"
    ],
    "deny": []
  }
}